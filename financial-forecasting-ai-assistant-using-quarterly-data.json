{
  "name": "My workflow 6",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        1072,
        128
      ],
      "id": "d8d8cf84-49dc-428a-bfd0-8a81cfb0e9dc",
      "name": "DeepSeek Chat Model",
      "credentials": {
        "deepSeekApi": {
          "id": "ViYmhrE7oBlhugDs",
          "name": "DeepSeek account 2"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "name": "Replace Me",
      "typeVersion": 1,
      "position": [
        560,
        -64
      ],
      "id": "c645bce9-f80d-4d1c-9db0-eea3f11b3b6b"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -576,
        -80
      ],
      "id": "8925e5fa-1034-4172-8c3c-17100e3f3371",
      "name": "Manual Start"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/drive/v3/files",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googleDriveOAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "q",
              "value": "'1CSeDlsyZVtU7J4uvEqS7OENs6lgmKary' in parents and mimeType='application/pdf'"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -320,
        -80
      ],
      "id": "f3b13f9c-8e64-4d1c-ad1a-84281b2b275d",
      "name": "List Drive PDFs",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "7xqqD3WgQNvOvfhD",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const files = items[0].json.files || [];\nreturn files.map(f => ({ json: f }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -96,
        -80
      ],
      "id": "ade689d9-4f18-414c-8888-aaa36a7aa0c2",
      "name": "Format File List"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        112,
        -80
      ],
      "id": "ad2f8f38-0b78-4eb2-a9b9-5b33d6bee716",
      "name": "For Each File"
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        320,
        -176
      ],
      "id": "31cd29df-c88a-4315-90e1-eff956013c94",
      "name": "Download PDF",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "7xqqD3WgQNvOvfhD",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {
          "maxPages": 80
        }
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        848,
        -80
      ],
      "id": "ed66f723-9392-4c0b-9d05-4fb72dd0e494",
      "name": "Extract Text"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst processedData = items.map((item) => {\n  try {\n    // Get AI response text (support multiple formats)\n    let aiSummary = '';\n    if (item.json.response?.message?.content) {\n      aiSummary = item.json.response.message.content;\n    } else if (item.json.message?.content) {\n      aiSummary = item.json.message.content;\n    } else if (item.json.output) {\n      aiSummary = item.json.output;\n    } else {\n      aiSummary = JSON.stringify(item.json);\n    }\n\n    // Helper function: extract text between labels\n    function extract(label, text = aiSummary) {\n      const regex = new RegExp(`\\\\*\\\\*${label}:\\\\*\\\\*\\\\s*([\\\\s\\\\S]*?)(?=\\\\n\\\\n|\\\\n\\\\*\\\\*|$)`, \"i\");\n      const match = text.match(regex);\n      return match ? match[1].trim() : \"Not found\";\n    }\n\n    // Extract fields\n    const quarter = extract(\"Quarter\");\n    const year = extract(\"Year\");\n\n    const revenue = extract(\"Revenue\");\n    const ebit = extract(\"EBIT / Operating Income\");\n    const netIncome = extract(\"Net Income\");\n    const eps = extract(\"EPS \\\\(diluted\\\\)\");\n    const cashFlowOps = extract(\"Cash Flow from Operations\");\n    const capex = extract(\"Capex\");\n\n    const grossMargin = extract(\"Gross Margin\");\n    const operatingMargin = extract(\"Operating Margin\");\n    const netMargin = extract(\"Net Margin\");\n\n    const cashInvestments = extract(\"Cash and Short-Term Investments\");\n    const totalDebt = extract(\"Total Debt\");\n    const shareholdersEquity = extract(\"Shareholdersâ€™ Equity\");\n\n    const guidance = extract(\"Management Guidance / Outlook\");\n    const shareholderReturns = extract(\"Shareholder Returns\");\n    const growthInitiatives = extract(\"Growth Initiatives\");\n\n    const strategicHighlights = extract(\"Strategic Highlights / Key Events\");\n    const risks = extract(\"Risks / Challenges Noted\");\n    const sentiment = extract(\"Sentiment and Qualitative Signals\");\n    const additionalNotes = extract(\"Additional Notes\");\n\n    return {\n      quarter,\n      year,\n      revenue,\n      ebit,\n      net_income: netIncome,\n      eps,\n      cash_flow_ops: cashFlowOps,\n      capex,\n      gross_margin: grossMargin,\n      operating_margin: operatingMargin,\n      net_margin: netMargin,\n      cash_investments: cashInvestments,\n      total_debt: totalDebt,\n      shareholders_equity: shareholdersEquity,\n      guidance,\n      shareholder_returns: shareholderReturns,\n      growth_initiatives: growthInitiatives,\n      strategic_highlights: strategicHighlights,\n      risks,\n      sentiment,\n      additional_notes: additionalNotes,\n      full_summary: aiSummary,\n      processing_date: new Date().toISOString(),\n      _debug: {\n        summary_length: aiSummary.length,\n        has_quarter: quarter !== \"Not found\",\n        has_year: year !== \"Not found\"\n      }\n    };\n\n  } catch (error) {\n    return {\n      quarter: \"Error\",\n      year: \"Error\",\n      revenue: \"Error\",\n      ebit: \"Error\",\n      net_income: \"Error\",\n      eps: \"Error\",\n      cash_flow_ops: \"Error\",\n      capex: \"Error\",\n      gross_margin: \"Error\",\n      operating_margin: \"Error\",\n      net_margin: \"Error\",\n      cash_investments: \"Error\",\n      total_debt: \"Error\",\n      shareholders_equity: \"Error\",\n      guidance: \"Error\",\n      shareholder_returns: \"Error\",\n      growth_initiatives: \"Error\",\n      strategic_highlights: \"Error\",\n      risks: \"Error\",\n      sentiment: \"Error\",\n      additional_notes: \"Error\",\n      full_summary: \"Failed to process AI response\",\n      processing_date: new Date().toISOString(),\n      _error: error.message,\n      _rawData: JSON.stringify(item, null, 2)\n    };\n  }\n});\n\nreturn processedData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1568,
        -80
      ],
      "id": "02b35388-c761-453e-9c30-d81f1dfc1287",
      "name": "Parse Summary"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "11_bF3bCrRq01ZaDGTgVMs7-DkCGsZOP2UdHkiPmxaww",
          "mode": "list",
          "cachedResultName": "Quarterly-summary-MSFT",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11_bF3bCrRq01ZaDGTgVMs7-DkCGsZOP2UdHkiPmxaww/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 1329307098,
          "mode": "list",
          "cachedResultName": "Sheet2",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11_bF3bCrRq01ZaDGTgVMs7-DkCGsZOP2UdHkiPmxaww/edit#gid=1329307098"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1840,
        -80
      ],
      "id": "590eba69-70f7-4b32-9e51-022585c115d6",
      "name": "Save to Sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0DjlCNPppkvfCeEj",
          "name": "Google Sheets account 3"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "11_bF3bCrRq01ZaDGTgVMs7-DkCGsZOP2UdHkiPmxaww",
          "mode": "list",
          "cachedResultName": "Quarterly-summary-MSFT",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11_bF3bCrRq01ZaDGTgVMs7-DkCGsZOP2UdHkiPmxaww/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11_bF3bCrRq01ZaDGTgVMs7-DkCGsZOP2UdHkiPmxaww/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        2048,
        -80
      ],
      "id": "4d3e3acc-63aa-4cd2-9ed1-7a76ca50fc90",
      "name": "Get row(s) in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0DjlCNPppkvfCeEj",
          "name": "Google Sheets account 3"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are provided with company data from quarterly earnings press releases and call transcripts (Q1â€“Q3) {{ $json.quarter }} {{ $json.year }}. \nUsing this information, forecast the companyâ€™s full-year financials (FY2025). \n\nWhen forecasting, take into account:\n- Actual reported figures for Q1â€“Q3 (Revenue {{ $json.revenue }}, EBIT {{ $json.ebit }}, Net Income {{ $json.net_income }}, EPS {{ $json.eps }}, Cash Flow {{ $json.cash_flow_ops }}, Capex {{ $json.capex }}, Margins, Balance Sheet items).\n- Management guidance {{ $json.guidance }} and forward-looking statements.\n- Strategic initiatives {{ $json.strategic_highlights }} {{ $json.growth_initiatives }}(M&A, AI/cloud growth, product launches, restructuring, cost-saving measures).\n- Shareholder returns {{ $json.shareholder_returns }}(dividends, buybacks).\n- Risks and challenges {{ $json.risks }}(macroeconomic, competitive, regulatory, FX, supply chain, ESG).\n- Qualitative signals (management tone, analyst Q&A themes).\n- Seasonality patterns (if relevant for revenue/expenses).\n- Historical performance trends (growth rates, margins).\n- Segment and regional performance breakdowns when available.\n- Constant currency adjustments if provided {{ $json.additional_notes }}.\n\n**Output Format (Markdown with bold labels):**\n\n**Forecast Year:** FY2025  \n**Forecast Revenue:** [Value + YoY % vs prior year]  \n**Forecast EBIT / Operating Income:**  \n**Forecast Net Income:**  \n**Forecast EPS (diluted):**  \n**Forecast Cash Flow from Operations:**  \n**Forecast Capex:**  \n**Forecast Margins:**  \n- Gross Margin:  \n- Operating Margin:  \n- Net Margin:  \n\n**Balance Sheet Outlook:**  \n- Cash and Short-Term Investments:  \n- Total Debt:  \n- Shareholdersâ€™ Equity:  \n\n**Key Drivers / Assumptions:**  \n- [Summarize main assumptions driving the forecast: growth rates, segment contributions, guidance alignment, etc.]\n\n**Risks to Forecast:**  \n- [List the most material risks that could cause variance vs forecast.]\n\n**Analyst Viewpoint:**  \n- [1â€“2 sentences with a professional equity analyst perspective on outlook and risks.]",
        "options": {
          "systemMessage": "You are a professional equity research analyst with expertise in forecasting annual financial statements \nfrom quarterly earnings reports, management guidance, and strategic disclosures. \nYour role is to generate accurate, defensible projections by integrating both quantitative results \nand qualitative insights such as guidance, strategic priorities, risks, and market context. \nYou must present your output in a clear, structured format that can be used directly in financial modeling."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2256,
        -80
      ],
      "id": "346aafde-26a6-4dd0-ad61-bf5a141e246b",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "options": {
          "maxTokens": {}
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatDeepSeek",
      "typeVersion": 1,
      "position": [
        2240,
        128
      ],
      "id": "8065d5d3-a2e4-4525-9651-d0855403f98d",
      "name": "DeepSeek Chat Model2",
      "credentials": {
        "deepSeekApi": {
          "id": "ViYmhrE7oBlhugDs",
          "name": "DeepSeek account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\n\nconst processedData = items.map((item) => {\n  try {\n    // Get AI response text (support multiple formats)\n    let aiForecast = '';\n    if (item.json.response?.message?.content) {\n      aiForecast = item.json.response.message.content;\n    } else if (item.json.message?.content) {\n      aiForecast = item.json.message.content;\n    } else if (item.json.output) {\n      aiForecast = item.json.output;\n    } else {\n      aiForecast = JSON.stringify(item.json);\n    }\n\n    // Helper function: extract text between labels (with support for bullet points and multi-line)\n    function extract(label, text = aiForecast) {\n      const regex = new RegExp(`\\\\*\\\\*${label}:\\\\*\\\\*\\\\s*([\\\\s\\\\S]*?)(?=\\\\n\\\\n|\\\\n\\\\*\\\\*|$)`, \"i\");\n      const match = text.match(regex);\n      return match ? match[1].trim() : \"Not found\";\n    }\n\n    // Helper function: extract bullet point values from margin section\n    function extractMargin(marginLabel, text = aiForecast) {\n      const regex = new RegExp(`-\\\\s*${marginLabel}:\\\\s*([^\\\\n]+)`, \"i\");\n      const match = text.match(regex);\n      return match ? match[1].trim() : \"Not found\";\n    }\n\n    // Helper function: extract bullet point values from balance sheet\n    function extractBalanceSheet(itemLabel, text = aiForecast) {\n      const regex = new RegExp(`-\\\\s*${itemLabel}:\\\\s*([^\\\\n]+)`, \"i\");\n      const match = text.match(regex);\n      return match ? match[1].trim() : \"Not found\";\n    }\n\n    // Extract forecast fields\n    const forecastYear = extract(\"Forecast Year\");\n    \n    const forecastRevenue = extract(\"Forecast Revenue\");\n    const forecastEBIT = extract(\"Forecast EBIT \\\\/ Operating Income\");\n    const forecastNetIncome = extract(\"Forecast Net Income\");\n    const forecastEPS = extract(\"Forecast EPS \\\\(diluted\\\\)\");\n    const forecastCashFlowOps = extract(\"Forecast Cash Flow from Operations\");\n    const forecastCapex = extract(\"Forecast Capex\");\n\n    // Extract margin forecasts from bullet points\n    const forecastGrossMargin = extractMargin(\"Gross Margin\", aiForecast);\n    const forecastOperatingMargin = extractMargin(\"Operating Margin\", aiForecast);\n    const forecastNetMargin = extractMargin(\"Net Margin\", aiForecast);\n\n    // Extract balance sheet outlook from bullet points\n    const cashInvestmentsOutlook = extractBalanceSheet(\"Cash and Short-Term Investments\", aiForecast);\n    const totalDebtOutlook = extractBalanceSheet(\"Total Debt\", aiForecast);\n    const shareholdersEquityOutlook = extractBalanceSheet(\"Shareholdersâ€™ Equity\", aiForecast);\n\n    // Extract key sections\n    const keyDrivers = extract(\"Key Drivers \\\\/ Assumptions\");\n    const risksToForecast = extract(\"Risks to Forecast\");\n    const analystViewpoint = extract(\"Analyst Viewpoint\");\n\n    // Clean up the data for Google Sheets (remove markdown formatting, etc.)\n    const cleanValue = (value) => {\n      if (value === \"Not found\") return \"\";\n      return value.replace(/\\*\\*/g, \"\").replace(/\\*/g, \"\").trim();\n    };\n\n    return {\n      forecast_year: cleanValue(forecastYear),\n      forecast_revenue: cleanValue(forecastRevenue),\n      forecast_ebit: cleanValue(forecastEBIT),\n      forecast_net_income: cleanValue(forecastNetIncome),\n      forecast_eps: cleanValue(forecastEPS),\n      forecast_cash_flow_ops: cleanValue(forecastCashFlowOps),\n      forecast_capex: cleanValue(forecastCapex),\n      forecast_gross_margin: cleanValue(forecastGrossMargin),\n      forecast_operating_margin: cleanValue(forecastOperatingMargin),\n      forecast_net_margin: cleanValue(forecastNetMargin),\n      cash_investments_outlook: cleanValue(cashInvestmentsOutlook),\n      total_debt_outlook: cleanValue(totalDebtOutlook),\n      shareholders_equity_outlook: cleanValue(shareholdersEquityOutlook),\n      key_drivers: cleanValue(keyDrivers),\n      risks_to_forecast: cleanValue(risksToForecast),\n      analyst_viewpoint: cleanValue(analystViewpoint),\n      full_forecast: aiForecast.replace(/\\*\\*/g, \"\").replace(/\\*/g, \"\"), // Clean markdown from full text\n      processing_date: new Date().toISOString(),\n      _debug: {\n        forecast_length: aiForecast.length,\n        has_forecast_year: forecastYear !== \"Not found\",\n        has_financial_metrics: forecastRevenue !== \"Not found\" || forecastEBIT !== \"Not found\"\n      }\n    };\n\n  } catch (error) {\n    return {\n      forecast_year: \"Error\",\n      forecast_revenue: \"Error\",\n      forecast_ebit: \"Error\",\n      forecast_net_income: \"Error\",\n      forecast_eps: \"Error\",\n      forecast_cash_flow_ops: \"Error\",\n      forecast_capex: \"Error\",\n      forecast_gross_margin: \"Error\",\n      forecast_operating_margin: \"Error\",\n      forecast_net_margin: \"Error\",\n      cash_investments_outlook: \"Error\",\n      total_debt_outlook: \"Error\",\n      shareholders_equity_outlook: \"Error\",\n      key_drivers: \"Error\",\n      risks_to_forecast: \"Error\",\n      analyst_viewpoint: \"Error\",\n      full_forecast: \"Failed to process forecast response\",\n      processing_date: new Date().toISOString(),\n      _error: error.message,\n      _rawData: JSON.stringify(item, null, 2)\n    };\n  }\n});\n\nreturn processedData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2576,
        -80
      ],
      "id": "09e47665-26ac-436e-b61f-f6f72f86688c",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "operation": "appendOrUpdate",
        "documentId": {
          "__rl": true,
          "value": "11_bF3bCrRq01ZaDGTgVMs7-DkCGsZOP2UdHkiPmxaww",
          "mode": "list",
          "cachedResultName": "Quarterly-summary-MSFT",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11_bF3bCrRq01ZaDGTgVMs7-DkCGsZOP2UdHkiPmxaww/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 2017906983,
          "mode": "list",
          "cachedResultName": "Sheet3",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/11_bF3bCrRq01ZaDGTgVMs7-DkCGsZOP2UdHkiPmxaww/edit#gid=2017906983"
        },
        "columns": {
          "mappingMode": "autoMapInputData",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        2816,
        -80
      ],
      "id": "e8795dc2-9097-4322-b1ce-c49facada418",
      "name": "Append or update row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "0DjlCNPppkvfCeEj",
          "name": "Google Sheets account 3"
        }
      }
    },
    {
      "parameters": {
        "content": "## Financial Forecasting AI Assistant (Quarterly data)\n\n### Step-by-step Guide:\n--> Add credentials: Google Drive OAuth2, Google Sheets OAuth2, DeepSeek API.\n\n--> Update Drive folder ID in List Drive PDFs to your quarterly folder.\n\n--> Confirm destination sheet IDs for Save to Sheet / Append or update row in sheet.\n\n--> Run Manual Start to ingest QTR PDFs â†’ Extract Text â†’ Summarize Article â†’ Parse Summary â†’ Save to Sheet.\n\n--> Trigger forecasting: Get row(s) in sheet â†’ AI Agent â†’ Code in JavaScript â†’ Append or update row in sheet.\n\n--> Validate: check Sheet2 for quarterly summaries and Sheet3 for forecasts; inspect _debug fields for parsing/forecast quality.\n\nTip: ensure Q1â€“Q3 rows exist before running forecasts; consistent transcript formatting helps AI extract guidance/sentiment.",
        "height": 336,
        "width": 880
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        448,
        -608
      ],
      "id": "7515a4a7-07cd-4198-9449-cee7ab3d932c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Extract and organize the following information from this quarterly earnings release or call transcript {{ $json.text }}. \nProvide concise but detailed content under each label:\n\n**Quarter:** (Q1, Q2, Q3, Q4)\n**Year:** \n\n**Financial Results:**\n- Revenue (total and segment/regional breakdowns if available)\n- EBIT / Operating Income\n- Net Income\n- EPS (diluted, adjusted if mentioned)\n- Cash Flow from operations\n- Capex\n- Margins (gross margin, operating margin, net margin if disclosed)\n- Balance sheet highlights (debt, liquidity, cash position)\n\n**Management Guidance / Outlook:**\n- Forward-looking revenue, earnings, margin, or cash flow expectations\n- Full-year or next-quarter guidance\n- Capex guidance\n- Shareholder returns (dividends, buybacks, payout policy)\n- Growth initiatives (market expansion, product launches, M&A, restructuring)\n\n**Strategic Highlights / Key Events:**\n- Acquisitions, divestitures, partnerships\n- Major product launches or pipeline updates\n- Operational improvements or restructuring efforts\n- Expansion into new markets or channels\n- Technology, digitization, or sustainability initiatives\n\n**Risks / Challenges Noted:**\n- Macroeconomic or industry headwinds\n- Competitive pressures\n- Regulatory or legal risks\n- Supply chain disruptions\n- Commodity, FX, or interest rate impacts\n- ESG-related risks (climate, social, governance)\n\n**Sentiment and Qualitative Signals:**\n- Tone of management (confident, cautious, uncertain)\n- Analyst Q&A highlights (recurring questions, concerns, or reassurance)\n- Investor perception risks\n\n**Additional Notes:**\n- Any other disclosures relevant for forecasting or valuation (e.g., tax disputes, restructuring charges, one-offs).\n\nReturn the output in structured Markdown format with bold labels, exactly as specified above.",
        "options": {
          "systemMessage": "You are a professional equity research analyst specializing in financial modeling and forecasting. \nYour task is to extract structured, detailed, and reliable financial and qualitative information \nfrom quarterly earnings press releases and earnings call transcripts. \nYou must capture both quantitative results and qualitative insights such as management guidance, \nstrategic priorities, risks, and forward-looking commentary. \nAlways return output in structured Markdown format with bold labels."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1136,
        -80
      ],
      "id": "f402c5f0-0e61-4d19-a806-84a20b2137a7",
      "name": "Summarize Reports"
    }
  ],
  "pinData": {},
  "connections": {
    "DeepSeek Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Summarize Reports",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Replace Me": {
      "main": [
        [
          {
            "node": "For Each File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Manual Start": {
      "main": [
        [
          {
            "node": "List Drive PDFs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Drive PDFs": {
      "main": [
        [
          {
            "node": "Format File List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format File List": {
      "main": [
        [
          {
            "node": "For Each File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "For Each File": {
      "main": [
        [
          {
            "node": "Download PDF",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Replace Me",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download PDF": {
      "main": [
        [
          {
            "node": "Extract Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text": {
      "main": [
        [
          {
            "node": "Summarize Reports",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Summary": {
      "main": [
        [
          {
            "node": "Save to Sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save to Sheet": {
      "main": [
        [
          {
            "node": "Get row(s) in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "DeepSeek Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Append or update row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize Reports": {
      "main": [
        [
          {
            "node": "Parse Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "80fb88a2-0997-4f92-9e96-fd807c77b06a",
  "meta": {
    "instanceId": "9a11dca52f3f73e39c043b74f1574854490a74c58dbb5910076a77c9046e62c6"
  },
  "id": "yrvPFOMODTAIwntm",
  "tags": []
}